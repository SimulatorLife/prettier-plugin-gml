name: Verify Codex PRs Before Auto-merge

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

jobs:
  regression-tests:
    name: Detect new test failures (allow legacy failures)
    runs-on: ubuntu-latest

    steps:
      # === BASE (merge target) ===
      - name: Checkout base (merge target)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          path: base

      - name: Setup Node (base)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: base/package-lock.json

      - name: Install deps (base)
        working-directory: base
        run: npm ci

      - name: Prepare test result directory (base)
        working-directory: base
        run: |
          rm -rf test-results
          mkdir -p test-results

      - name: Run shared tests (base)
        working-directory: base
        run: |
          mkdir -p test-results
          node --test \
            --test-reporter=junit --test-reporter-destination=./test-results/shared.xml \
            --test-reporter=tap   --test-reporter-destination=./test-results/shared.tap \
            src/shared/tests/*.test.js
        continue-on-error: true

      - name: Run parser tests (base)
        working-directory: base/src/parser
        run: |
          mkdir -p ../../test-results
          node --test \
            --test-reporter=junit --test-reporter-destination=../../test-results/parser.xml \
            --test-reporter=tap   --test-reporter-destination=../../test-results/parser.tap \
            tests/*.test.js
        continue-on-error: true

      - name: Run plugin tests (base)
        working-directory: base/src/plugin
        run: |
          mkdir -p ../../test-results
          node --test \
            --test-reporter=junit --test-reporter-destination=../../test-results/plugin.xml \
            --test-reporter=tap   --test-reporter-destination=../../test-results/plugin.tap \
            tests/*.test.js
        continue-on-error: true

      - name: Run CLI tests (base)
        working-directory: base/src/cli
        run: |
          mkdir -p ../../test-results
          node --test \
            --test-reporter=junit --test-reporter-destination=../../test-results/cli.xml \
            --test-reporter=tap   --test-reporter-destination=../../test-results/cli.tap \
            tests/*.test.js
        continue-on-error: true

      # === HEAD (PR) at workspace root ===
      - name: Checkout head (PR)
        uses: actions/checkout@v4

      - name: Setup Node (head)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install deps (head)
        run: npm ci

      - name: Prepare test result directory (head)
        run: |
          rm -rf test-results
          mkdir -p test-results

      - name: Run shared tests (head)
        run: |
          mkdir -p test-results
          node --test \
            --test-reporter=junit --test-reporter-destination=./test-results/shared.xml \
            --test-reporter=tap   --test-reporter-destination=./test-results/shared.tap \
            src/shared/tests/*.test.js
        continue-on-error: true

      - name: Run parser tests (head)
        working-directory: src/parser
        run: |
          mkdir -p ../../test-results
          node --test \
            --test-reporter=junit --test-reporter-destination=../../test-results/parser.xml \
            --test-reporter=tap   --test-reporter-destination=../../test-results/parser.tap \
            tests/*.test.js
        continue-on-error: true

      - name: Run plugin tests (head)
        working-directory: src/plugin
        run: |
          mkdir -p ../../test-results
          node --test \
            --test-reporter=junit --test-reporter-destination=../../test-results/plugin.xml \
            --test-reporter=tap   --test-reporter-destination=../../test-results/plugin.tap \
            tests/*.test.js
        continue-on-error: true

      - name: Run CLI tests (head)
        working-directory: src/cli
        run: |
          mkdir -p ../../test-results
          node --test \
            --test-reporter=junit --test-reporter-destination=../../test-results/cli.xml \
            --test-reporter=tap   --test-reporter-destination=../../test-results/cli.tap \
            tests/*.test.js
        continue-on-error: true

      # Ensure the XML parser is available for the compare script
      - name: Install compare script dependency
        run: npm install --no-save fast-xml-parser@^4

      - name: Compare JUnit results (fail only on regressions)
        run: |
          cat <<'EOF' > compare-junit.js
          import fs from 'node:fs';
          import path from 'node:path';
          import { XMLParser } from 'fast-xml-parser';

          function readCases(rootDir) {
            const parser = new XMLParser({ ignoreAttributes: false, attributeNamePrefix: '' });
            const results = new Map(); // key => status
            const resultsDir = path.join(rootDir, 'test-results');
            if (!fs.existsSync(resultsDir)) return results;

            const files = fs.readdirSync(resultsDir).filter(f => f.endsWith('.xml'));
            for (const file of files) {
              const xml = fs.readFileSync(path.join(resultsDir, file), 'utf8');
              const data = parser.parse(xml);
              const suites = [];
              if (data.testsuites && Array.isArray(data.testsuites.testsuite)) { suites.push(...data.testsuites.testsuite); }
              else if (data.testsuite) { suites.push(data.testsuite); }
              else if (Array.isArray(data.testsuites)) { suites.push(...data.testsuites); }

              for (const suite of suites) {
                const cases = suite.testcase ? (Array.isArray(suite.testcase) ? suite.testcase : [suite.testcase]) : [];
                for (const tc of cases) {
                  const name = String(tc.name ?? '');
                  const cls = String(tc.classname ?? suite.name ?? '');
                  const key = cls + ' :: ' + name;
                  let status = 'passed';
                  if (tc.skipped !== undefined) status = 'skipped';
                  if (tc.error !== undefined || tc.errors !== undefined) status = 'failed';
                  if (tc.failure !== undefined || tc.failures !== undefined) status = 'failed';
                  results.set(key, status);
                }
              }
            }
            return results;
          }

          const base = readCases(path.resolve(process.cwd(), 'base'));
          const head = readCases(process.cwd());

          const regressions = [];
          for (const [key, headStatus] of head.entries()) {
            const baseStatus = base.get(key);
            if (baseStatus === undefined) { continue; } // new test -> ignore even if failing
            if ((baseStatus === 'passed' || baseStatus === 'skipped') && headStatus === 'failed') {
              regressions.push({ test: key, from: baseStatus, to: headStatus });
            }
          }

          if (regressions.length) {
            console.log('New failing tests detected (compared to base):');
            for (const r of regressions) console.log('- ' + r.test + ' (' + r.from + ' -> ' + r.to + ')');
            process.exit(1);
          } else {
            console.log('No new failing tests compared to base.');
          }
          EOF
          node compare-junit.js
        shell: bash

      - name: Publish PR test summary (head only)
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: Node.js test results (PR head)
          path: test-results/*.xml
          reporter: java-junit
          fail-on-error: true
          use-actions-summary: true
        working-directory: head
