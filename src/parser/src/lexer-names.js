/**
 * Centralizes access to the generated lexer's literal token names so parser-
 * and printer-level utilities can import them from a parser-focused location.
 */
import Lexer from "./generated/GameMakerLanguageLexer.js";

const { literalNames } = Lexer;

export const MULTI_LINE_COMMENT = literalNames[Lexer.MultiLineComment];
export const SINGLE_LINE_COMMENT = literalNames[Lexer.SingleLineComment];
export const INLINE_COMMENT = literalNames[Lexer.InlineComment];
export const LINE_CONTINUATION = literalNames[Lexer.LineContinuation];
export const LIST_ACCESSOR = literalNames[Lexer.ListAccessor];
export const MAP_ACCESSOR = literalNames[Lexer.MapAccessor];
export const GRID_ACCESSOR = literalNames[Lexer.GridAccessor];
export const ARRAY_ACCESSOR = literalNames[Lexer.ArrayAccessor];
export const STRUCT_ACCESSOR = literalNames[Lexer.StructAccessor];
export const OPEN_PAREN = literalNames[Lexer.OpenParen];
export const CLOSE_PAREN = literalNames[Lexer.CloseParen];
export const OPEN_BRACE = literalNames[Lexer.OpenBrace];
export const TEMPLATE_STRING_END_EXPRESSION =
    literalNames[Lexer.TemplateStringEndExpression];
export const CLOSE_BRACE = literalNames[Lexer.CloseBrace];
export const BEGIN = literalNames[Lexer.Begin];
export const END = literalNames[Lexer.End];
export const SEMI_COLON = literalNames[Lexer.SemiColon];
export const COMMA = literalNames[Lexer.Comma];
export const ASSIGN = literalNames[Lexer.Assign];
export const COLON = literalNames[Lexer.Colon];
export const DOT = literalNames[Lexer.Dot];
export const PLUS_PLUS = literalNames[Lexer.PlusPlus];
export const MINUS_MINUS = literalNames[Lexer.MinusMinus];
export const PLUS = literalNames[Lexer.Plus];
export const MINUS = literalNames[Lexer.Minus];
export const BIT_NOT = literalNames[Lexer.BitNot];
export const NOT = literalNames[Lexer.Not];
export const MULTIPLY = literalNames[Lexer.Multiply];
export const DIVIDE = literalNames[Lexer.Divide];
export const INTEGER_DIVIDE = literalNames[Lexer.IntegerDivide];
export const MODULO = literalNames[Lexer.Modulo];
export const POWER = literalNames[Lexer.Power];
export const QUESTION_MARK = literalNames[Lexer.QuestionMark];
export const NULL_COALESCE = literalNames[Lexer.NullCoalesce];
export const NULL_COALESCING_ASSIGN = literalNames[Lexer.NullCoalescingAssign];
export const RIGHT_SHIFT_ARITHMETIC = literalNames[Lexer.RightShiftArithmetic];
export const LEFT_SHIFT_ARITHMETIC = literalNames[Lexer.LeftShiftArithmetic];
export const LESS_THAN = literalNames[Lexer.LessThan];
export const MORE_THAN = literalNames[Lexer.MoreThan];
export const LESS_THAN_EQUALS = literalNames[Lexer.LessThanEquals];
export const GREATER_THAN_EQUALS = literalNames[Lexer.GreaterThanEquals];
export const EQUALS = literalNames[Lexer.Equals];
export const NOT_EQUALS = literalNames[Lexer.NotEquals];
export const BIT_AND = literalNames[Lexer.BitAnd];
export const BIT_XOR = literalNames[Lexer.BitXOr];
export const BIT_OR = literalNames[Lexer.BitOr];
export const AND = literalNames[Lexer.And];
export const OR = literalNames[Lexer.Or];
export const XOR = literalNames[Lexer.Xor];
export const MULTIPLY_ASSIGN = literalNames[Lexer.MultiplyAssign];
export const DIVIDE_ASSIGN = literalNames[Lexer.DivideAssign];
export const PLUS_ASSIGN = literalNames[Lexer.PlusAssign];
export const MINUS_ASSIGN = literalNames[Lexer.MinusAssign];
export const MODULUS_ASSIGN = literalNames[Lexer.ModulusAssign];
export const LEFT_SHIFT_ARITHMETIC_ASSIGN =
    literalNames[Lexer.LeftShiftArithmeticAssign];
export const RIGHT_SHIFT_ARITHMETIC_ASSIGN =
    literalNames[Lexer.RightShiftArithmeticAssign];
export const BIT_AND_ASSIGN = literalNames[Lexer.BitAndAssign];
export const BIT_XOR_ASSIGN = literalNames[Lexer.BitXorAssign];
export const BIT_OR_ASSIGN = literalNames[Lexer.BitOrAssign];
export const NUMBER_SIGN = literalNames[Lexer.NumberSign];
export const DOLLAR_SIGN = literalNames[Lexer.DollarSign];
export const AT_SIGN = literalNames[Lexer.AtSign];
export const BOOLEAN_LITERAL = literalNames[Lexer.BooleanLiteral];
export const INTEGER_LITERAL = literalNames[Lexer.IntegerLiteral];
export const DECIMAL_LITERAL = literalNames[Lexer.DecimalLiteral];
export const BINARY_LITERAL = literalNames[Lexer.BinaryLiteral];
export const HEX_INTEGER_LITERAL = literalNames[Lexer.HexIntegerLiteral];
export const UNDEFINED = literalNames[Lexer.Undefined];
export const NO_ONE = literalNames[Lexer.NoOne];
export const BREAK = literalNames[Lexer.Break];
export const EXIT = literalNames[Lexer.Exit];
export const DO = literalNames[Lexer.Do];
export const CASE = literalNames[Lexer.Case];
export const ELSE = literalNames[Lexer.Else];
export const NEW = literalNames[Lexer.New];
export const VAR = literalNames[Lexer.Var];
export const GLOBAL_VAR = literalNames[Lexer.GlobalVar];
export const CATCH = literalNames[Lexer.Catch];
export const FINALLY = literalNames[Lexer.Finally];
export const RETURN = literalNames[Lexer.Return];
export const CONTINUE = literalNames[Lexer.Continue];
export const FOR = literalNames[Lexer.For];
export const SWITCH = literalNames[Lexer.Switch];
export const WHILE = literalNames[Lexer.While];
export const UNTIL = literalNames[Lexer.Until];
export const REPEAT = literalNames[Lexer.Repeat];
export const FUNCTION = literalNames[Lexer.Function];
export const WITH = literalNames[Lexer.With];
export const DEFAULT = literalNames[Lexer.Default];
export const IF = literalNames[Lexer.If];
export const THROW = literalNames[Lexer.Throw];
export const DELETE = literalNames[Lexer.Delete];
export const TRY = literalNames[Lexer.Try];
export const ENUM = literalNames[Lexer.Enum];
export const CONSTRUCTOR = literalNames[Lexer.Constructor];
export const STATIC = literalNames[Lexer.Static];
export const SELF = literalNames[Lexer.Self];
export const OTHER = literalNames[Lexer.Other];
export const ALL = literalNames[Lexer.All];
export const MACRO = literalNames[Lexer.Macro];
export const ESCAPED_NEW_LINE = literalNames[Lexer.EscapedNewLine];
export const DEFINE = literalNames[Lexer.Define];
export const REGION = literalNames[Lexer.Region];
export const END_REGION = literalNames[Lexer.EndRegion];
export const IDENTIFIER = literalNames[Lexer.Identifier];
export const STRING_LITERAL = literalNames[Lexer.StringLiteral];
export const TEMPLATE_STRING_START = literalNames[Lexer.TemplateStringStart];
export const VERBATIM_STRING_LITERAL =
    literalNames[Lexer.VerbatimStringLiteral];
export const WHITE_SPACES = literalNames[Lexer.WhiteSpaces];
export const LINE_TERMINATOR = literalNames[Lexer.LineTerminator];
export const UNEXPECTED_CHARACTER = literalNames[Lexer.UnexpectedCharacter];
export const REGION_CHARACTERS = literalNames[Lexer.RegionCharacters];
export const REGION_EOL = literalNames[Lexer.RegionEOL];
export const TEMPLATE_STRING_END = literalNames[Lexer.TemplateStringEnd];
export const TEMPLATE_STRING_START_EXPRESSION =
    literalNames[Lexer.TemplateStringStartExpression];
export const TEMPLATE_STRING_TEXT = literalNames[Lexer.TemplateStringText];
